{
  "version": 3,
  "sources": [
    "components/AddCategory.js",
    "helpers/getGifs.js",
    "components/GifGridItem.js",
    "components/GrifGrid.js",
    "hooks/useFetchGif.js",
    "GifExpertApp.js",
    "index.js"
  ],
  "names": [
    "AddCategory",
    "setCategories",
    "useState",
    "inputValue",
    "setinputValue",
    "onSubmit",
    "e",
    "preventDefault",
    "trim",
    "length",
    "cats",
    "type",
    "value",
    "onChange",
    "target",
    "PropType",
    "func",
    "isRequired",
    "getGift",
    "category",
    "a",
    "url",
    "encodeURI",
    "fetch",
    "respuesta",
    "json",
    "data",
    "gif",
    "map",
    "img",
    "id",
    "title",
    "images",
    "downsized_medium",
    "GifGridItem",
    "className",
    "src",
    "alt",
    "GrifGrid",
    "loading",
    "state",
    "setstate",
    "useEffect",
    "then",
    "imgs",
    "useFetchGifs",
    "GifExpertApp",
    "categories",
    "ReactDOM",
    "render",
    "document",
    "getElementById"
  ],
  "mappings": "kOAGcA,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SAVc,SAACC,GACnBA,EAAEC,iBACOJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAM1B,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,aAsB3BZ,EAAYe,SAAS,CACjBd,cAAec,IAASC,KAAKC,Y,2CC7BpBC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,gDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KACFC,EAAMD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARnB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGnC,OACI,sBAAKc,UAAU,8CAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHAO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEvB,ECHsB,SAAEA,GACxB,MAA0BjB,mBAAS,CAACwB,KAAK,GAAGa,SAAQ,IAApD,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAfAC,qBAAU,WACNxB,EAASC,GACRwB,MAAK,SAAAC,GAEEH,EAAS,CAELf,KAAKkB,EACLL,SAAQ,SAKtB,CAACpB,IAGIqB,EDfsBK,CAAc1B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAErB,OACE,eAAC,WAAD,WACA,oBAAIJ,UAAU,qCAAd,SAAoDhB,IACpDoB,GAAS,mBAAGJ,UAAU,oCAAb,qBACT,qBAAKA,UAAU,YAAf,SAIMH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEbRgB,EAAe,WAGxB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK8C,EAAWnB,KAAI,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MClBrB6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W",
  "file": "static/js/main.7ed01bad.chunk.js",
  "sourcesContent": [
    "import React, { useState } from \"react\";\r\nimport PropType from 'prop-types'\r\n\r\nexport  const AddCategory =({setCategories})=> {\r\n  const [inputValue, setinputValue] = useState('');\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n  const handleSubmint = (e) => {\r\n      e.preventDefault()\r\n            if(inputValue.trim().length>2){\r\n                setCategories(cats=>[inputValue,...cats])\r\n                setinputValue('')\r\n\r\n            }\r\n        \r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmint}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.PropType={\r\n    setCategories: PropType.func.isRequired\r\n}",
    "export const getGift = async ( category) => {\r\n    const url = `https:/api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=djgO0iAU2NEcprVBZ5e6eDcela4IgLVn`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n    const gif = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gif\r\n  };\r\n  ",
    "import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n  \r\n    \r\n    return (\r\n        <div className=\"card animate__animated  animate__backInLeft\">\r\n         <img src={url} alt={title}/>\r\n         <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n",
    "import React from \"react\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGif\";\r\n import { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GrifGrid = ({ category }) => {\r\n  \r\n    const {data:images,loading}= useFetchGifs( category );\r\n\r\n  return (\r\n    <Fragment>\r\n    <h3 className=\"animate__animated  animate__fadeIn\">{category}</h3>\r\n   {loading&&<p className=\"animate__animated  animate__flash\">Loading</p>}\r\n    <div className=\"card-grid\">\r\n      \r\n      \r\n        {\r\n          images.map(img=>(\r\n            <GifGridItem\r\n            key={img.id}\r\n            {...img}\r\n            />\r\n          ))\r\n        }\r\n       \r\n    </div>\r\n    </Fragment>\r\n  );\r\n};\r\n",
    "import { useState ,useEffect} from \"react\"\r\nimport { getGift } from \"../helpers/getGifs.js\";\r\n\r\n\r\nexport const useFetchGifs=( category )=>{\r\n    const [state, setstate] = useState({data:[],loading:true});\r\n\r\n    useEffect(() => {\r\n        getGift( category )\r\n        .then(imgs=>{\r\n              \r\n                setstate({\r\n                \r\n                    data:imgs,\r\n                    loading:false\r\n                })    \r\n    \r\n            \r\n        })\r\n    },[category] )\r\n\r\n\r\n    return state;\r\n    \r\n}\r\n",
    "import { type } from 'os'\r\nimport { listenerCount } from 'process'\r\nimport React,{ useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GrifGrid } from './components/GrifGrid'\r\n//snipet para la creacion rapida de componente \"rafc\"\r\nexport const GifExpertApp = () => {\r\n    // const categories=\r\n    \r\n    const [categories, setCategories] = useState(['One Punch'])\r\n   \r\n    // const handleAdd=()=>{\r\n    //     // setCategories([...categories,'Hunter Hunter'])\r\n    //     setCategories((cats=>[...categories,'Hunter hunter']))\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n          \r\n            <ol>\r\n                {categories.map(category=> ( \r\n                <GrifGrid \r\n                key={category}\r\n                category={category}></GrifGrid>\r\n                ))\r\n                }\r\n                \r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"
  ],
  "sourceRoot": ""
}
